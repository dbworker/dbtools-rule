# UTF8 with BOM

#******************************************************************************
#                                  README
# Rule.ini is used to auto generate js code which actually check db's info.
# Rule.ini will be updated on https://github.com/dbworker/dbtools-rule.
#
# If rule's test is true, related info will be recorded as a issue, and shown
# on vscode.
#
# Rule syntax
#   rule_id | rule_note | check_expr | optional_note1 | optional_note2
# each field split by '|', (so js '||' operator must be replaced by ' or ')
#
# rule_id:
#     unique rule number, and pre-defined ranges
#     [0,    99] not use
#     [100, 199] basic rule
#     [200, 299] advance rule
#     [300, 399] strict rule
#
# rule_note:
#     The note is human readable when found issue, will be shown on vscode.
#     If note omitted, then "check_expr" is used instead.
#     When written to issues.txt, it will be enclosed by (""), so be careful:
#         1xx|'abc is xyz'    | HC_ABC == 'xyz'   // ok, best, "abc is xyz"
#         2xx|"abc is 'xyz'"  | HC_ABC == ...     // ok, good, "abc is 'xyz'"
#         3xx|'abc is \'xyz\''| HC_ABC == 'xyz'   // ok,       "abc is \'xyz\'"
#         xxx|'abc is "xyz"'  | HC_ABC == "xyz"   // error,    "abc is "xyz""
#         xxx|"abc is \"xyz\""| HC_ABC == ...     // ok,       "abc is \"xyz\""
#         xxx|'abc is \"xyz\"'| HC_ABC == ...     // ok,       "abc is \"xyz\""
#
# check_expr:
#     A pseudo expression, not support 'if else', will be convert to js. 
#     Advise enclose string with ('') prior to ("")
#     Sometimes use expr as rule_note, and (") be auto replaced by (\"), so:
#         1xx| | HC_ABC == 'xyz'         // ok, best , "HC_ABC == 'xyz'"
#         2xx| | HC_ABC == "xyz"         // ok,  "HC_ABC == \"xyz\""
#         4xx| | HC_ABC == 'key:"ABC"'   // ok,  "HC_ABC == 'key:\"ABC\"'"
#         3xx| | HC_ABC == 'xy\'s z'     // ok,  "HC_ABC == 'xy\'s z'"
#         xxx| | HC_ABC == 'key:\"ABC\"' // error, can not use escape (\")
#         xxx| | HC_ABC == "key:\"ABC\"" // error, can not use escape (\")
#
#     (1)convert example
#            HC_OS_DF_UMAX > 80
#        will convert to
#            if ( hccdata['HC_OS_DF_UMAX'] > 80 ) { recordIssue(HC_OS_DF_UMAX,,); }
#     (2)simple syntax
#        a) HC_XXX  , a variable, value from <HC_XXX v="??"/> or <HC_XXX>??</HC_XXX>
#        b) @HC_YYY['str'][num], for multi-line tag, str filter line, num specify field
#           str and num only support literal, not variable or complex code, so:
#               @HC_YYY[ HC_ABC ][0]    // error str
#               @HC_YYY[ 'xxx'  ][3.4]  // error num
#        c) AWR_ZZZ , a jquery-style table object, value from awr html DOM
#        d) other element use javascript syntax
#        e) js '||' operator must be replaced by ' or '
#     (3)what is the expr's meaning?
#        expr test is true means a doubtful data(xml or awr ) was found, for example
#            HC_OS_DF_UMAX > 80
#        Originally HC_OS_DF_UMAX is a tag in 1-host.xml, now is a variable with value.
#        As the name shown, tag value is the max space usage percent from df output.
#        So the expr means if max usage exceed 80%, the OS status is not safe.
#        When exceed, dbtools will record related info and show on vscode.
#        About ("85" > 80), can string compare with number? js can process correctly
#        But ("2048 MB" > 2000) will fail, so code as: ( parseInt("2048 MB") > 2000 )
#     (4) some trick
#        If expr have many tags, the first HC_* or AWR_* selected as error tag, so
#            HC_ISRAC == 'YES' && HC_INSTANCE_COUNT <2  // HC_ISRAC be marked error
#            HC_INSTANCE_COUNT <2 && HC_ISRAC == 'YES'  // HC_INSTANCE_COUNT be marked
#        second expr is better, the HC_INSTANCE_COUNT is root cause, not HC_ISRAC.
#
#        Some data may missed in xml or awr for many reason, such as spfile parameter:
#            1) no spfile when use pfile
#            2) no spfile when default after oracle 12c
#        The 'recyclebin' parameter default is 'on', so if want to check 'recyclebin',
#        following exprs' result is different:
#    @HC_DB_PARAMETERS['recyclebin'][0] != 'on' // error, '' != 'on', true when is default (want false)
#                                               // ok,  'on' != 'on',false when set 'on'   (want false)
#                                               // ok, 'off' != 'on', true when set 'off'  (want true)
#    @HC_DB_PARAMETERS['recyclebin'][0] == 'off'// ok,   '' == 'off',false when is default (want false)
#                                               // ok, 'on' == 'off', false when set 'on'  (want false)
#                                               // ok, 'off'== 'off', true  when set 'off' (want true)
#
# optional_note: optional advice text (english or other language)
#


################## 1 Basic rule #################

# 1.1 os
    100| | HC_OS_DF_UMAX > 80     | recommend concern space usage   | 建议关注空间使用情况
    101| | HC_OS_DF_IMAX > 800000 | recommend concern rubbish files | 建议检查垃圾文件数量
    102| | HC_OS_UPDAYS  > 270    | recommend schedule restart host | 建议有计划地重启主机

# 1.2 installation
    110| | parseFloat(HC_DB_VERSION) < 12.2    | recommend upgrading to newest versoin | 建议升级到19c以上版本
    111| | HC_DB_BLOCK_SIZE     > 8192         | recommend large block eff| 建议观察是否对IO性能有影响
    112| | HC_TABLESPACE_COUNT  > 100          | recommend reviewing tablespace creation policy | 建议查看表空间是否需要这么多
    113| | parseInt(HC_DB_USED_SPACE) > 10000000 | recommend shrinking data | 建议对数据库瘦身
    114| 'HC_DATAFILE_COUNT close to limit' | HC_DATAFILE_COUNT > (@HC_DB_SPEC_PARAMS['db_files'][0] or 200) * 0.8   | recommend adjust db_files parameter | 建议调大db_files参数
    115| | HC_CONTROL_NUM       < 2            | recommend duplicating control file | 建议有两份控制文件
    116| | parseInt(HC_REDO_MINSIZE)  < 100    | recommend using redo more than 100M | 建议使用100M以上的redo
    117| | (HC_REDO_GROUPS / HC_INSTANCE_COUNT) < 4 | recommend more groups | 建议使用更多redo group
    118| | HC_PARAM_PROCESSES   < 1000         | recommend processes >= 1000| 建议processes参数大于1000
    119| | HC_MAX_CONNECTIONS   > HC_PARAM_PROCESSES * 0.7| recommend adjust processes parameter | 建议调整processes参数
    120| | HC_TABLESPACE_UMAX   > 90           | recommend adding tablespace timely | 建议及时添加表空间
    121| | parseInt(HC_RECYCLEBIN_USED) > 1000 | recommend cleaning recyclebin timely | 建议及时清理回收站
    122| | HC_INVALID_OBJECTS   > 10           | recommend checking invalid reason | 建议查看无效对象的原因
    123| | HC_SQL_VC_MAX        > 500          | recommend checking why versoin count become big | 建议查看vc版本多的原因
    124| | HC_DB_SCN            > 1000000000000| recommend checking why SCN become big | 建议SCN大的原因(如大量使用dblink） 
    125| | HC_PATCH_INFO       == ''          | recommend patching database | 建议给数据库打补丁

# 1.3 parameter
    # for parameters that require set explicitly, check HC_DB_SPEC_PARAMS with style !(meet recommend)
    
    # _gc_policy_time           recommend: 0           , DRM feature maybe cause RAC LMS/LMD process timeout
    # _gc_undo_affinity         recommend: FALSE       , DRM feature maybe cause RAC LMS/LMD process timeout
    130| 'DRM _gc_policy_time is not 0'       | !( @HC_DB_SPEC_PARAMS['_gc_policy_time'][0]   == '0'  ) && (HC_IS_RAC == 'YES')    | recommend disable DRM
    131| 'DRM _gc_undo_affinity is not FALSE' | !( @HC_DB_SPEC_PARAMS['_gc_undo_affinity'][0] == 'FALSE' ) && (HC_IS_RAC == 'YES') | recommend disable DRM

    # _use_adaptive_log_file_sync   recommend: FALSE   , maybe pool performance when LGWR auto switch on polling/post-wait mode
    132| '_use_adaptive_log_file_sync is not FALSE' | !(@HC_DB_SPEC_PARAMS['_use_adaptive_log_file_sync'][0] == 'FALSE') | recommend disable param

    # recyclebin       recommend: 'on'    , safe-guard for careless delete or drop
    133| 'recyclebin is off'     | @HC_DB_PARAMETERS['recyclebin'][0] == 'off'        | recommend enable recyclebin

    # spfile           recommend: not null, spfile better than pfile
    134| 'spfile not in use'     | !(@HC_DB_PARAMETERS['spfile'][0])                  | recommend use spfile

    # undo_retention   recommend: >= 3600 , to avoid ORA-01555
    135| 'undo_retention < 3600' | !(@HC_DB_SPEC_PARAMS['undo_retention'][0] >= 3600) | recommend adjust param

# 1.4 backup
    #   backup db   at least  weekly
    #   backup arch at least  daily
    #   too small or too large is abnormal
    140| | HC_LOG_MODE           != 'ARCHIVELOG'      | recommend setting ARCHIVELOG mode and backup | 建议打开归档并对数据库备份
    141| | HC_BACKUP_DB          == ''                | recommend backup database
    142| | HC_BACKUP_ARCH        == ''                | recommend backup archive log
    143| | HC_BACKUP_FAILED      != ''                | recommend check reason of fail backup
    #144| | HC_BACKUP_DB_WEEKLY_MIN < (HC_BACKUP_DB_WEEKLY_MAX/3)
    #145| | HC_BACKUP_ARCH_DAILY_MIN < (HC_BACKUP_ARCH_DAILY_MAX/4)
    #   TODO: recover test


# 1.5 log
    #150| | $HC_ALERT_ERRORS     != ''                | recommend diagnosing the errors cause | 建议分析报错的原因



# 1.6 security
    #   user privilege(super role)
    #   enable audit
    160| 'app user has DBA role' | HC_DBA_GRANTED != ''             | recommend check user privilege | 建议检查用户权限是否过大
    161| 'db audit not set \"DB\"' | (HC_AUDIT_STRATEGY or 'NONE').substr(0,2) != 'DB' | recommend enable database audit | 建议启用数据库审计
    162| 'aud$ is large' | parseInt(HC_DB_AUDTAB_SIZEM)    > 1000     | recommend cleaning aud$ table timely | 建议及时清理aud$表中数据
    # profile


# 1.7 cluster
    170| 'Only one RAC node up'| (HC_INSTANCE_COUNT < 2) && (HC_ISRAC == 'YES') | recommend checking RAC status
    # gc block lost
    #171 HC_RAC_BLOCKS_LOST > 100
    # gc stream
    #172 HC_RAC_TRAFFIC_SIZEM > 20
    # asm diskgroup usage
    172| | HC_ASM_DG_UMAX > 80 | recommend check ASM space
    # asm sga
    # HC_ASM_SGA_SIZEG > 2
    # asm disk
    # HC_ASM_DATA_DISK_COUNT > 4
    # HC_ASM_OCR_DISK_COUNT > 2
    # css trail error (HB lost)
    # HC_CRS_OCSSD_LOG
    # 


################## 2 Advanced rule ##############

# 2.1 os

    # kernel net
    201| 'HC_OS_KERNEL netbuf < 4M' | (HC_OS_UNAME == 'AIX')   && ((@HC_OS_KERNEL['udp_recvspace'][1]     or 5000000) < 4000000) | recommend adjust to 4M for better performance
    202| 'HC_OS_KERNEL netbuf < 4M' | (HC_OS_UNAME == 'Linux') && ((@HC_OS_KERNEL['net.core.rmem_max'][0] or 5000000) < 4000000) | recommend adjust to 4M for better performance
    # io
    # ??
    # 203| HC_OS_DISK_IO_USAGE > 90

    # 204| HC_CPU_RUN_QUEUE > HC_CPU_COUNT * 2
    # 205| HC_CPU_RUN_QUEUE > 20
    # 206| HC_CPU_BLOCK_QUEUE > 10


# 2.2 install

    #------ parameter in HC_DB_SPEC_PARAMS (partial)

    # _optimizer_extended_cursor_sharing_rel recommend: NONE  , bug will cause sql hang
    # _optimizer_extended_cursor_sharing     recommend: NONE  , bug will cause sql hang
    # _optimizer_adaptive_cursor_sharing     recommend: FALSE , bug will cause sql hang
    210| '.._cursor_sharing_rel is enable'      | @HC_DB_SPEC_PARAMS['_optimizer_extended_cursor_sharing_rel'][0] == 'SIMPLE' | recommend disable cursor sharing
    211| '.._extended_cursor_sharing is enable' | @HC_DB_SPEC_PARAMS['_optimizer_extended_cursor_sharing'][0]     == 'UDO'   | recommend disable cursor sharing
    212| '.._adaptive_cursor_sharing is enable' | @HC_DB_SPEC_PARAMS['_optimizer_adaptive_cursor_sharing'][0]     == 'TRUE' | recommend disable cursor sharing

    # _optimizer_mjc_enabled        (recommend: FALSE?)  , forbidden MERGE JOIN CARTESIAN sql plan, let it be
    # 213
    # _optimizer_null_aware_antijoin(recommend: FALSE?)  , (11g) has bug, tuning for Anti-Join sql, let it be
    # 214
    # _optimizer_use_feedback       recommend: FALSE   , (11g) bug will cause CBO wrong and bad performance
    # 215| _optimizer_use_feedback is enable    | @HC_DB_SPEC_PARAMS['_optimizer_use_feedback'][0] != 'FALSE' | recommend disable param

    # _undo_autotune                recommend: FALSE   , maybe give a large undo-retention (>1 day) and undotbs can't reuse space
    216| '_undo_autotune is enable'  | @HC_DB_SPEC_PARAMS['_undo_autotune'][0] == 'TRUE' | recommend disable param


    # _use_single_log_writer        (recommend:?)
    # 217
    # cell_offload_processing       (recommend:?)
    # 218
    # db_files                      (for flashback ref)
    # 219
    # db_recovery_file_dest         (for flashback ref)
    # 220
    # db_recovery_file_dest_size    (for flashback ref)
    # 221

    # deferred_segment_creation     recommend: FALSE   , export will skip empty table (then import will lost it)
    222| 'deferred_segment_creation is enable'    | @HC_DB_SPEC_PARAMS['deferred_segment_creation'][0] == 'TRUE' | recommend disable param

    # local_listener                (for reference)
    # log_archive_config            (for dataguard ref)
    # log_archive_dest_2            (for dataguard ref)
    # 223|
    # memory_max_target             (for reference)

    # open_cursors                  recommend: <= 3000 , too large will hurt PGA and shared pool memory
    224| 'open_cursors is large'   | @HC_DB_SPEC_PARAMS['open_cursors'][0] > 3000   | recommend adjust param

    # optimizer_adaptive_features   recommend: FALSE   , 12.1.0.2 new feature but has bug that occupy large sql parse
    #225| 'optimizer_adaptive_features is enable'    | @HC_DB_SPEC_PARAMS['optimizer_adaptive_features'][0] == 'TRUE' | recommend disable param

    # parallel_force_local          recommend: TRUE    , limit parallel-query not abuse RAC nodes
    # parallel_max_servers          recommend: <=32    , limit parallel-query not abuse cpu
    226| 'parallel_force_local is FALSE'  | @HC_DB_SPEC_PARAMS['parallel_force_local'][0] == 'FALSE' | recommend enable param
    227| 'parallel_max_servers > 32'      | (@HC_DB_SPEC_PARAMS['parallel_max_servers'][0] or '160') > 32   | recommend adjust param


    # remote_login_passwordfile     (for reference)
    # result_cache_max_size         (recommend: 0?)    , maybe not useful, let it be
    # sec_case_sensitive_logon      (recommend:  ?)    , let it be


    # sga_max_size                  (for reference)
    # sga_target                    (for reference)

    # other parameter
    #   _b_tree_bitmap_plans      set false to disable complex index operate, index should tuning firstly
    #   _optimizer_adaptive_plans set false
    #   _optimizer_ads_use_result_cache set false to disable result cache
    #   _optimizer_aggr_groupby_elim set false, (doc 19567916.8)Wrong results when GROUP BY uses nested queries in 12.1.0.2
    #   _PX_use_large_pool        set true to use large pool
    #   _partition_large_extents  set false to forbid initial large extent
    #   _memory_imm_mode_without_autosga  (11.2.0.3) set false to forbid imm when some pool already insufficient
    #   enable_ddl_logging        (12c)set true sometime is useful for troubleshooting
    #   event='28401 TRACE NAME CONTEXT FOREVER, LEVEL 1', to disable 'delay password check' feature
    #   event='10949 trace name context forever,level 1',  to disable 'use direct-path-read' feature (I like direct-path-read)
    #   OPTIMIZER_DYNAMIC_SAMPLING set false? let it be
    #   optimizer_index_cost_adj (default 100) little num little index cost, for example 40, make CBO prefer index

    # ---------------- other
    # osw, tfa, ahf

    #pdb timezone
    #flashback
    #dbf, archive, multi-copy, different disk
    # CONTROLFILE_SIZEM > 512M
    # redo grp > 2
    # undo
    # ??
    # media soft, patch

# 2.3 object

    #------ table/part -----
    #241, HC_TABLE_USE_LONG > 100
    #242, HC_TABLE_SIZEG_MAX > 80
    #243, HC_PTABLE_PARSIZEG_MAX   > 80
    #244| HC_PTABLE_PARTS_MAX  > 1024
    #245| HC_TABLE_IN_SYSTBS_COUNT > 10
    #246| HC_TABLE_LOWUSAGE_COUNT > 20
    #247| $HC_TABLE_NAME_LOWERCASE != ''

    #------ index ----------
    248| | HC_INDEX_COLS_MAX > 6 | recommend check index has many cols
    249| | HC_TABLE_IDXS_MAX > 6 | recommend check table has many indexes
    #250| $HC_TABLE_100M_NO_INDEX != ''
    #251| HC_INDEX_BLEVEL_MAX > 4
    #252| HC_INDEX_LOWUSAGE_COUNT > 20
    #  TODO: large normal index

    #------ misc type ------
    #253| HC_DB_NOCACHE_SEQ_COUNT > 10
    #254| HC_DEPRCT_DBA_JOBS_COUNT > 5
    #255| @HC_PK_USE_NORMAL_INDEX != ''


    #------ statistic ------
    # stale statistic
    # ??
    # no statistic
    #HC_TAB_NO_STA_COUNT > 10

    # fetch continued row
    # ??


# 2.4 awr
    # massive modify
    #HC_PROF_BLOCK_CHANGES > HC_PROF_READ_BLOCKS * 0.33
    #HC_PROF_READ_DISK_BLOCKS > HC_PROF_READ_BLOCKS * 0.1
    # HC_PROF_LOGON_PER_SECOND > 10
    260| 'per second logons > 10'| AWR_LOAD_PROFILE.find('tr:contains("Logons:") td').eq(1).text() > 10 | recommend use permanent connection
    #HC_PROF_REDO_SIZEM > 20
    #261

    # event 'enq' in top 2 (javascript code)
    #AWR_TOP_EVENTS))[0].startsWith('enq') || AWR_TOP_EVENTS))[1].startsWith('enq')
    262| 'enq event in top2'|AWR_TOP_EVENTS.find('tr').eq(1).find('td').eq(0).text().startsWith('enq') or AWR_TOP_EVENTS.find('tr').eq(2).find('td').eq(0).text().startsWith('enq')

    # event io latency > 10 ms
    #AWR_TOP_EVENTS))['log file sync'][3] > 10
    #AWR_TOP_EVENTS))['db file sequential read'][3] > 10

    # RAC 'gc%' related net latency > 3 ms
    #AWR_TOP_EVENTS))['gc cr grant 2-way'][3] > 3
    #AWR_TOP_EVENTS))['gc cr disk read'][3] > 3

    # background top events
    #AWR_BKGD_EVENTS))['log file parallel write'][4] > 3
    #AWR_BKGD_EVENTS))['db file parallel write'][4] > 3

    # top-1 sql gets > 20%
    #AWR_SQL_TOP_GETS))[0][0] >  HC_AWR_DB_READ_BLOCKS * 0.2

    # top-1 sql executions > 20%
    #AWR_SQL_TOP_EXECS))[0][0] >  HC_AWR_DB_READ_BLOCKS * 0.2

    # top-2 sql (order by executions) found  ( ... from dual)
    #AWR_SQL_TOP_EXECS))[0][8].endsWith(' from dual') || AWR_TOP_EVENTS))[1][8].endsWith(' from dual')



# 2.5 log
    #------ listener -------
    270| | HC_LSNR_LOG_SIZEM > 1000  | recommend clean listener log
    271| | HC_LSNR_TRAIL_COUNT > 200 | recommend clean listener trail files
    # TODO: listener service block

    # abnormal proc log
    # ??

# 2.6 concurrency (daytime)

    #------ txn ------------
    # large txn
    #306, HC_SQL_INSERT_ROWNUM > 10000
    #306, HC_SQL_UPDATE_ROWNUM > 10000
    #307, HC_SQL_DELETE_ROWNUM > 10000
    # long running txn (8:00 ~ 18:00)
    #HC_TXN_DURATION_MAX > 600
    #HC_TXN_UNDO_SIZEM_MAX > 128
    # too many rollback
    #int(AWR_INST_STATS.children('transaction rollbacks').next().val) > int(AWR_INST_STATS.children('transaction rollbacks').next().val) / 20
    #HC_TXN_2PC_PENDING != ''
    #------ lock ----------
    # internal-lock (latch, library cache lock, mutex)
    # ??
    #AWR_TOP_EVENTS.children('latch').next().val)
    #AWR_TOP_EVENTS.children('library cache').next().val)
    #AWR_TOP_EVENTS.children('cursor').next().val)
    # txn 'enq'
    # lock duration
    # lock block others
    # (checked in AWR)
    # ddl lock
    # ??
    # deadlock
    # ??


# 2.7 sql
    #   suspicious sql (DDL, large DML, missing 'WHERE')
    #   suspicious client (too many connected from PC)
    #304, $HC_SQL_LONG_RUN_DDL != ''
    #305, HC_SQL_SELECT_ROWNUM > 100000
    #308, $HC_SQL_MISSING_WHERE != ''
    # sql long running
    #HC_SQL_DURATION_MAX > 7200

    # large sort
    #HC_SQL_SORT_SIZEM_MAX > 128
    # implicitly convert between char and number
    # ??
    # 使用11g新特性来找未bind

    # index full scan
    # ??
    # index split
    # ??
    # table full scan
    #@HC_SQL_HAS_WILDCARD_PREFIX == 'TRUE'

# 2.8 process/session
    #309, HC_DB_CONN_FROM_GUI > 10
    #HC_SESS_ACTIVE_MAX > HC_CPU_COUNT * 3
    #HC_SESS_ACTIVE_MAX > 100


    #   TODO: sqlnet.ora allow IPs
    #   TODO: more ddl such as alter, column
    #   TODO: critical table's access
    #   TODO: check aud$ and find something
    #   TODO: job schedule

################## 3 Strict rule ################
# 3.1 os
    # use huge page when memory size > 128G (incompatible with MMA memory_target)
    # ??
    # free
    #HC_OS_FREE_MEM_SIZEM < 2000
    # ulimit
    # ??
    # NTP
    #@HC_OS_NTP == ''

# 3.2 application
    # dblink is bad
    #201, HC_DBLINK_COUNT > 3
    # trigger is bad
    #203, (HC_TRIGGER_COUNT > 100) || (HC_TRIGGER_COUNT > HC_TABLE_COUNT/30)
    # large id means create&drop object too frequently
    310| | HC_OBJECT_ID_MAX > 2000000 | recommend check if too many create/drop operations
    #HC_FOREIGN_KEY_INUSE
    #select from update nowait
    # don't use where rowid
    # subquery
    # select *
    # like '%abc'
    # select count(1) , not count(*)
    # different charset
    # view embed view

# 3.3 security
    # should exist standby db, and apply timly
    #119, @HC_STDBY_INUSE    == 'NO'              , recommend building standby database , 建议配置容灾库
    #HC_STDBY_LAG_IN_SEC > 3
    # dup redo member
    #HC_REDO_MEMBER_COUNT < 2
    # datafile & redo(archive) saved in different physical disk
    #@HC_SEPARATE_DBF_REDO_DISK == 'NO'
    #HC_PASSWD_VERIFY_FUNC

    
# 3.4 parameter
    #----- disable feature --- 
    # log_buffer > 256M when FRA
    # RMAN snpashot


# 3.5 other
    # haip
    # ??
    # awr retension > 35 day
    # copy database, oracle file mode
# 9 test rule for generator
    900| | AWR_LOAD_PROFILE.find('tr:contains("Logons:") td').eq(1).text() > 100 |
    901| | @HC_YYY['one\'s data is "a" and \'b\' and c'][0] > @HC_YYY["other's data is 'd' and e and \'f\'"][0]
    902| 'one\'s data is a and \'b\' and \"c\"'|@HC_YYY['one\'s data is "a" and \'b\' and c'][HCC_XXX] > @HC_YYY["other's data is 'd' and e and \'f\'"][HCC_XXX]
    903| "other's data is 'd' and \"e\" and \'f\'"|@HC_YYY['one\'s data is "a" and \'b\' and c'][HCC_XXX] or HCC_ZZZ or  @HC_YYY["other's data is 'd' and e and \'f\'"][HCC_XXX]
    904| |hc_yyy > 2 or awr_db_info
    905| | '2000 HC' > 1000 "AWR"

#******************************************************************************
#                      AWR_* variables' quick reference
#
# For performance reason, some useless awr DOM was excluded.
#******************************************************************************

# AWR Head
#const AWR_DB_INFO        = $('table[summary^="This table displays database instance information"]');
#const AWR_HOST_INFO      = $('table[summary^="This table displays host information"]');
#const AWR_SNAP_INFO      = $('table[summary^="This table displays snapshot information"]');

# Report Summary
const AWR_LOAD_PROFILE   = $('table[summary^="This table displays load profile"]');
#const AWR_INST_EFFIC     = $('table[summary^="This table displays instance efficiency percentages"]');
const AWR_TOP_EVENTS     = $('table[summary^="This table displays top 10 wait events by total wait time"]');
#const AWR_WAIT_CLASS     = $('table[summary^="This table displays wait class statistics ordered by total wait time"]');
const AWR_SYS_LOAD       = $('table[summary^="This table displays system load statistics"]');
#const AWR_CPU_USAGE      = $('table[summary^="This table displays CPU usage and wait statistics"]');
#const AWR_IO_PROFILE     = $('table[summary^="This table displays IO profile"]');
#const AWR_HOST_MEM       = $('table[summary^="This table displays memory statistics"]');
#const AWR_DB_CACHE       = $('table[summary^="This table displays cache sizes and other statistics for"]');
#const AWR_SHARED_POOL    = $('table[summary^="This table displays shared pool statistics"]');

# Wait Events Statistics
#const AWR_TIME_MODEL     = $('table[summary^="This table displays different time model statistics"]');
#const AWR_OS_STATS       = $('table[summary^="This table displays operating systems statistics"]');
const AWR_OS_DETAIL      = $('table[summary^="This table displays some detailed operating systems statistics"]');
#const AWR_FG_WAIT_CLS    = $('table[summary^="This table displays foreground wait class statistics"]');
#const AWR_FG_WAIT_EVENTS = $('table[summary^="This table displays Foreground Wait Events and their wait statistics"]');
const AWR_BG_WAIT_EVENTS = $('table[summary^="This table displays background wait events statistics"]');
# $('table[summary^="This table displays total number of waits,"]');
#const AWR_SRVC_STATS     = $('table[summary^="This table displays service statistics"]');
#const AWR_SRVC_WAIT_CLS  = $('table[summary^="This table displays service wait class statistics"]');

# SQL Statistics
const AWR_SQL_ELAPSE     = $('table[summary^="This table displays top SQL by elapsed time"]');
#const AWR_SQL_CPU        = $('table[summary^="This table displays top SQL by CPU time"]');
#const AWR_SQL_IO         = $('table[summary^="This table displays top SQL by user I/O time"]');
const AWR_SQL_GETS       = $('table[summary^="This table displays top SQL by buffer gets"]');
#const AWR_SQL_READS      = $('table[summary^="This table displays top SQL by physical reads"]');
#const AWR_SQL_PHYIO      = $('table[summary^="This table displays top SQL by unoptimized read requests"]');
const AWR_SQL_EXEC       = $('table[summary^="This table displays top SQL by number of executions"]');
#const AWR_SQL_PARSE      = $('table[summary^="This table displays top SQL by number of parse calls"]');
#const AWR_SQL_SHM        = $('table[summary^="This table displays top SQL by amount of shared memory used"]');
#const AWR_SQL_VC         = $('table[summary^="This table displays top SQL by version counts"]');
#const AWR_SQL_CLUSTER    = $('table[summary^="This table displays top SQL by cluster wait time"]');
#const AWR_SQL_TEXT       = $('table[summary^="This table displays the text of the SQL statements which have been"]');

# Instance Activity Statistics
const AWR_INST_KEY_STATS = $('table[summary^="This table displays Key Instance activity statistics."]');
const AWR_INST_STATS     = $('table[summary^="This table displays non-key Instance activity statistics."]');
#const AWR_INST_ABS_VALUE = $('table[summary^="This table displays absolute values of instance-related features."]');
#const AWR_INST_THREADS   = $('table[summary^="This table displays thread activity stats in the instance."]');

# IO Stats
#const AWR_IOSTAT_FUNC    = $('table[summary^="This table displays the IO Statistics for different functions."]');
#const AWR_IOSTAT_FILETYPE= $('table[summary^="This table displays IO Statistics for different file types,"]');
#const AWR_IOSTAT_SUMMARY = $('table[summary^="IOStat by Function/Filetype summary."]');
#const AWR_IOSTAT_TBS     = $('table[summary^="This table displays IO Statistics for different tablespaces."]');
#const AWR_IOSTAT_FILE    = $('table[summary^="This table displays IO Statistics for different physical files."]');

# Buffer Pool Statistics
#const AWR_BUF_STATS      = $('table[summary^="This table displays buffer pool statistics"]');
#const AWR_BUF_CKPT_STATS = $('table[summary^="This table displays checkpoint activity statistics."]');

# Advisory Statistics
#const AWR_ADV_INST_RECO  = $('table[summary^="This table displays instance recovery statistics"]');
#const AWR_ADV_BUFFER     = $('table[summary^="This table displays MTTR advisory."]');
#const AWR_ADV_PGA_SUM    = $('table[summary^="This table displays PGA aggregate summary."]');
#const AWR_ADV_PGA_STATS  = $('table[summary^="This table displays PGA aggregate target statistics"]');
#const AWR_ADV_PGA_HIST   = $('table[summary^="This table displays PGA aggregate target histograms."]');
#const AWR_ADV_PGA_MEM    = $('table[summary^="This table displays PGA memory advisory"]');
#const AWR_ADV_SHARED_POOL= $('table[summary^="This table displays shared pool advisory."]');
#const AWR_ADV_SGA        = $('table[summary^="This table displays SGA target advisory"]');

# Wait Statistics
#const AWR_WAIT_BUFFER    = $('table[summary^="This table displays buffer wait statistics."]');
const AWR_WAIT_ENQUEUE   = $('table[summary^="This table displays enqueue activity statistics."]');

# Undo Statistics
const AWR_UNDO_SEG_SUM   = $('table[summary^="This table displays undo segment summary."]');
#const AWR_UNDO_SEG_STATS = $('table[summary^="This table displays the 35 most recent Undostat rows."]');

# Latch Statistics
#const AWR_LATCH_STATS    = $('table[summary^="This table displays latch statistics."]');
#const AWR_LATCH_SLEEP    = $('table[summary^="This table displays latch sleep statistics."]');
#const AWR_LATCH_MISS     = $('table[summary^="This table displays latch miss sources."]');
#const AWR_LATCH_MUTEX    = $('table[summary^="This table displays the mutex sleep summary."]');

# Segment Statistics
#const AWR_SEG_LOGI_READS = $('table[summary^="This table displays top segments by logical reads."]');
#const AWR_SEG_PHY_READS  = $('table[summary^="This table displays top segments by physical reads."]');
#const AWR_SEG_PHY_RD_REQS= $('table[summary^="This table displays top segments by physical read requests."]');
#const AWR_SEG_UNOPTIM    = $('table[summary^="This table displays top segments by unoptimized reads."]');
#const AWR_SEG_DIRECT_RDS = $('table[summary^="This table displays top segments by direct physical reads."]');
#const AWR_SEG_PHY_WRITES = $('table[summary^="This table displays top segments by physical writes."]');
#const AWR_SEG_PHY_WR_REQS= $('table[summary^="This table displays top segments by physical write requests."]');
#const AWR_SEG_DIRECT_WRS = $('table[summary^="This table displays top segments by direct physical writes."]');
#const AWR_SEG_TABLE_SCANS= $('table[summary^="This table displays top segments by table scans."]');
#const AWR_SEG_BLK_CHANGES= $('table[summary^="This table displays top segments by DB blocks changes."]');
#const AWR_SEG_ROW_LOCK   = $('table[summary^="This table displays top segments by row lock waits."]');
#const AWR_SEG_BUF_BUSY   = $('table[summary^="This table displays top segments by buffer busy waits."]');
#const AWR_SEG_GC_BUF     = $('table[summary^="This table displays top segments by global cache buffer busy waits."]');
#const AWR_SEG_CR_RECV    = $('table[summary^="This table displays top segments by CR blocks received."]');
#const AWR_SEG_CUR_RECV   = $('table[summary^="This table displays top segments by current blocks received."]');

# Dictionary Cache Statistics
#const AWR_DICT_STATS     = $('table[summary^="This table displays dictionary cache statistics. Get requests, % misses,"]');
#const AWR_DICT_RAC       = $('table[summary^="This table displays dictionary cache statistics. Ges requests, GES conflicts ,"]');

# Library Cache Statistics
#const AWR_LIBC_STATS     = $('table[summary^="This table displays library cache statistics. Get requests,"]');
#const AWR_LIBC_RAC       = $('table[summary^="This table displays library cache statistics. Ges lock requests,"]');

# Memory Statistics
#const AWR_MEM_COMP       = $('table[summary^="This table displays memory dynamic component statistics."]');
#const AWR_MEM_RPOC_SUM   = $('table[summary^="This table displays process memory summary."]');
#const AWR_MEM_SGA_SUM    = $('table[summary^="This table displays SGA memory summary."]');
#const AWR_MEM_SGA_DIFF   = $('table[summary^="This table displays SGA breakdown difference."]');

# Streams Statistics (normally no data, no table)
# Resource Limit Statistics (normally no data, no table)

# Shared Server Statistics
#const AWR_SS_STATS       = $('table[summary^="This table displays shared servers activity statistics."]');
#const AWR_SS_RATES       = $('table[summary^="This table displays shared servers rate statistics."]');
#const AWR_SS_UTIL_STATS  = $('table[summary^="This table displays shared servers utilization statistics."]');
#const AWR_SS_DISP        = $('table[summary^="This table displays shared servers dispatcher statistics."]');

# init.ora Parameters
#const AWR_PARA_INIT      = $('table[summary^="This table displays name and value of init.ora parameters"]');
#const AWR_PARA_MULTI     = $('table[summary^="This table displays name and value of multi-valued init.ora parameters"]');

# RAC Statistics
# RAC Report Summary
#const AWR_RAC_INST           = $('table[summary^="This table displays information about RAC instances"]');
#const AWR_RAC_LOAD_PROFILE   = $('table[summary^="This table displays information about global cache load"]');
#const AWR_RAC_EFFIC          = $('table[summary^="This table displays global cache efficiency percentages"]');
#const AWR_RAC_WORKLOAD_AVG   = $('table[summary^="This table displays workload characteristics for global"]');
#const AWR_RAC_MSG_AVG        = $('table[summary^="This table displays messaging statistics for Global Cache"]');
#const AWR_RAC_INTERFACE      = $('table[summary^="Cluster Interconnect."]');

#const AWR_RAC_MSG_STATS      = $('table[summary^="This table displays global messaging statistics."]');
#const AWR_RAC_CR_SERVED      = $('table[summary^="This table displays global CR served statistics."]');
#const AWR_RAC_CUR_SERVED     = $('table[summary^="This table displays global current served statistics"]');
#const AWR_RAC_TRAN_BLKS      = $('table[summary^="This table displays global cache transfer stats"]');
#const AWR_RAC_TRAN_TIMES     = $('table[summary^="This table displays global cache transfer time statistics"]');
#const AWR_RAC_TRAN_BLKS_IMME = $('table[summary^="This table displays global cache transfer (immediate) statistics"]');
#const AWR_RAC_TRAN_TIMES_IMME= $('table[summary^="This table displays global cache times (immediate) statistics"]');
#const AWR_RAC_PING           = $('table[summary^="This table displays IC ping latency statistics"]');
#const AWR_RAC_BY_CLIENT      = $('table[summary^="This table displays Interconnect throughput by client statistics"]');
#const AWR_RAC_DEVICE_THROUGH = $('table[summary^="This table displays Interconnect device statistics"]');
#const AWR_RAC_DRM            = $('table[summary^="Dynamic Remastering Stats."]');


